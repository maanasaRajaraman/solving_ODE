import math
from numpy import *

#q1 newtons forward backward

import matplotlib.pyplot as plt
from sympy import *
import numpy as np

def create_table(x,y,n,table):
  for col in range(1,n):
    for row in range(n-col):
      table[row][col]=round(table[row+1][col-1]-table[row][col-1],2)

  return table

def calculate(u,n):
  temp = u
  for i in range(1, n):
      temp = temp * (u - i)
  print(temp)
  return temp

def fact(n):
    f = 1;
    for i in range(2, n + 1):
        f *= i
    return f

x_val=list(map(float,input("Enter x values:").split()))
y_val=list(map(float,input("Enter y values:").split()))
x,y=symbols('x y')

n=len(x_val)

table=[[0.0 for i in range(n)]for i in range(n)]
for i in range(n):
    table[i][0]=y_val[i]

#creating forward difference
table=create_table(x_val,y_val,n,table)

for row in table:
  print(row)


inp=float(input("Enter the value to be interpolated at:"))

y=table[0][0]
u=(x-x_val[0])/(x_val[1]-x_val[0])

for i in range(1,n):
  y = y + (((calculate(u, i)) * (table[0][i])) / fact(i));


pol=simplify(y)
res=pol.subs(x,inp)
print("Result: ",res)

x_pts=np.linspace(min(x_val),max(x_val),100)
y_pts=[]


for pt in x_pts:
  y_pts.append(pol.subs(x,pt))

x_val.append(inp)
y_val.append(res)

ax,fig=plt.subplots()
plt.plot(x_pts,y_pts)
plt.scatter(x_val,y_val,color='red')
first_diff=diff(pol)
res1=first_diff.subs(x,inp)
print("Res_1: ",res1)

second_diff=diff(first_diff)
res2=second_diff.subs(x,inp)
print("Res_2: ",res2)

#Newton's backward interpolation

import matplotlib.pyplot as plt
from sympy import *
import numpy as np

def create_table(x, y, n, table):
    for i in range(1, n):
      for j in range(n - 1, i - 1, -1):
        table[j][i] =table[j][i - 1] - table[j - 1][i - 1]
    return table

def calculate(u, n):
    temp = u
    for i in range(1, n):
        temp = temp * (u + i)
    return temp

def fact(n):
    f = 1
    for i in range(2, n + 1):
        f *= i
    return f

x_val = list(map(float, input("Enter x values: ").split()))
y_val = list(map(float, input("Enter y values: ").split()))
x, y = symbols('x y')

n = len(x_val)

table = [[0.0 for i in range(n)] for i in range(n)]
for i in range(n):
    table[i][0] = y_val[i]

# Create backward difference table
table = create_table(x_val, y_val, n, table)

for row in table:
    print(row)

inp = float(input("Enter the value to be interpolated at: "))

y = table[n-1][0]
u = (x - x_val[n - 1]) / (x_val[1] - x_val[0])

for i in range(1, n):
    y = y + (((calculate(u, i)) * (table[n-1][i])) / fact(i))

pol = simplify(y)
res = pol.subs(x, inp)
print("Result: ", res)

x_pts = np.linspace(min(x_val), max(x_val), 100)
y_pts = []

for pt in x_pts:
    y_pts.append(pol.subs(x, pt))

x_val.append(inp)
y_val.append(res)

fig, ax = plt.subplots()
plt.plot(x_pts, y_pts)
plt.scatter(x_val, y_val, color='red')

first_diff = diff(pol)
res1 = first_diff.subs(x, inp)
print("Res_1: ", res1)

second_diff = diff(first_diff)
res2 = second_diff.subs(x, inp)
print("Res_2: ", res2)