#q2
'''
def f1(x):
	return math.log(x**2)
def f2(x):
	return math.exp(-1*(x**2))
def f3(x):
	return (x**2)/(1+x**3)
'''
#Trapezoidal rule

a, b = 4, 5.2
n = 6
h=(b-a)/n
x=linspace(a,b,n+1)
I=0.5*(f(a)+f(b))
for j in range(1,n): 
   I=I+f(x[j]) 

I=h*I
print(I)
'''
# simpson's 1 / 3 rule 
'''
def simpsons_( ll, ul, n ):
	h = ( ul - ll )/n
	x = list()
	fx = list()
	i = 0
	while i<= n:
		x.append(ll + i * h)
		fx.append(f3(x[i]))
		i += 1
	res = 0
	i = 0
	while i<= n:
		if i == 0 or i == n:
			res+= fx[i]
		elif i % 2 != 0:
			res+= 4 * fx[i]
		else:
			res+= 2 * fx[i]
		i+= 1
	res = res * (h / 3)
	return res
lower_limit = 0
upper_limit = 1
n = 6
print("%.6f"% simpsons_(lower_limit, upper_limit, n))

#simpsons 3 / 8 rule

def simpson(l, u, lmt ):
	
	s = (float(u - l) / lmt)
	sum = f3(l) + f3(u);

	for i in range(1, lmt ):
		if (i % 3 == 0):
			sum = sum + 2 * f3(l + i * s)
		else:
			sum = sum + 3 * f3(l + i * s)
	
	return ((float(3 * s) / 8) * sum)

n = 10
l = 0
u = 1
res = simpson(l, u, n) 
print (round(res, 6))